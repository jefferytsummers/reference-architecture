# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import command_pb2 as command__pb2


class CommandQueueServiceStub(object):
    """CommandQueueService defines the RPC service for the command queue
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnqueueCommand = channel.unary_unary(
                '/commandqueue.CommandQueueService/EnqueueCommand',
                request_serializer=command__pb2.EnqueueCommandRequest.SerializeToString,
                response_deserializer=command__pb2.EnqueueCommandResponse.FromString,
                )
        self.DequeueCommand = channel.unary_unary(
                '/commandqueue.CommandQueueService/DequeueCommand',
                request_serializer=command__pb2.DequeueCommandRequest.SerializeToString,
                response_deserializer=command__pb2.DequeueCommandResponse.FromString,
                )
        self.RetryCommand = channel.unary_unary(
                '/commandqueue.CommandQueueService/RetryCommand',
                request_serializer=command__pb2.RetryCommandRequest.SerializeToString,
                response_deserializer=command__pb2.RetryCommandResponse.FromString,
                )


class CommandQueueServiceServicer(object):
    """CommandQueueService defines the RPC service for the command queue
    """

    def EnqueueCommand(self, request, context):
        """EnqueueCommand enqueues a command into the command queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DequeueCommand(self, request, context):
        """DequeueCommand dequeues a command from the command queue for a specific service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetryCommand(self, request, context):
        """RetryCommand retries a failed command by enqueueing it back into the command queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandQueueServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnqueueCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.EnqueueCommand,
                    request_deserializer=command__pb2.EnqueueCommandRequest.FromString,
                    response_serializer=command__pb2.EnqueueCommandResponse.SerializeToString,
            ),
            'DequeueCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DequeueCommand,
                    request_deserializer=command__pb2.DequeueCommandRequest.FromString,
                    response_serializer=command__pb2.DequeueCommandResponse.SerializeToString,
            ),
            'RetryCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.RetryCommand,
                    request_deserializer=command__pb2.RetryCommandRequest.FromString,
                    response_serializer=command__pb2.RetryCommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'commandqueue.CommandQueueService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommandQueueService(object):
    """CommandQueueService defines the RPC service for the command queue
    """

    @staticmethod
    def EnqueueCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/commandqueue.CommandQueueService/EnqueueCommand',
            command__pb2.EnqueueCommandRequest.SerializeToString,
            command__pb2.EnqueueCommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DequeueCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/commandqueue.CommandQueueService/DequeueCommand',
            command__pb2.DequeueCommandRequest.SerializeToString,
            command__pb2.DequeueCommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetryCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/commandqueue.CommandQueueService/RetryCommand',
            command__pb2.RetryCommandRequest.SerializeToString,
            command__pb2.RetryCommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
